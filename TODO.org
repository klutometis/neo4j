* TODO Finish the API.
  #+BEGIN_SRC scheme
    (use alist-lib
         debug
         http-client
         intarweb
         json
         medea
         uri-common)
    
    (include "neo4j.scm")
    (use neo4j)
    
    (define-record index
      template
      configuration)
    
    (define-record-printer index
      (lambda (index output)
        (pp (record->vector index) output)))
    
    ;;; <http://components.neo4j.org/neo4j-lucene-index/snapshot/>
    ;;; mentions that "lucene" is the default index.
    (define create-node-index
      (case-lambda
       ((service-root name)
        (create-node-index service-root name '()))
       ((service-root name config)
        (let ((index (with-input-from-request
                      (service-root-node-index service-root)
                      (json->string `((name . ,name)
                                      (config . ,config)))
                      read-json)))
          (make-index (alist-ref index 'template)
                      (alist-delete 'template index))))))
    
    (define create-relationship-index
      (case-lambda
       ((service-root name)
        (create-relationship-index service-root name '()))
       ((service-root name config)
        (let ((index (with-input-from-request
                      (service-root-relationship-index service-root)
                      (json->string `((name . ,name)
                                      (config . ,config)))
                      read-json)))
          (make-index (alist-ref index 'template)
                      (alist-delete 'template index))))))
    
    ;;; Should we do an index-lookup by name?
    (define delete-node-index
      (case-lambda
       ((service-root index-name)
        (let ((uri (uri-reference (service-root-node-index service-root))))
          (with-input-from-request
           (make-request method: 'DELETE
                         uri: (update-uri uri
                                          path: (append (uri-path uri)
                                                        (list index-name))))
           #f
           read-json)))
       ((node-index)
        (with-input-from-request
         (make-request method: 'DELETE
                       uri: (uri-relative-to
                             (uri-reference "..")
                             (uri-reference
                              (replace
                               (index-template node-index)
                               '(("key" . "")
                                 ("value" . ""))))))
         #f
         read-json))))
    
    (define delete-relation-index delete-node-index)
    
    (define (list-node-indices service-root)
      (with-input-from-request
       (service-root-node-index service-root)
       #f
       read-json))
    
    (define list-node-indexes list-node-indices)
    
    (define (add-node-to-index service-root index-name key value node)
      (with-input-from-request
       (uri-relative-to
        (uri-reference index-name)
        (uri-reference
         (service-root-node-index service-root)))))
    
    (let ((connection (connect "http://localhost:7474/db/data")))
      (debug connection)
      (let ((name (symbol->string (gensym))))
        (let ((node-index (create-node-index connection name)))
          (delete-node-index node-index))
        (create-node-index connection name)
        (delete-node-index connection name))
    
      (debug (list-node-indices connection))
      (create-relationship-index connection (symbol->string (gensym))))
  #+END_SRC

* DONE Multi-replace
  CLOSED: [2012-05-25 Fri 18:59]
  #+BEGIN_SRC scheme
    (use irregex
         test
         matchable
         debug)
    
    (define replace
      (case-lambda
       ((template key value)
        (irregex-replace `(: "{" ,key "}") template value))
       ((template key->value)
        (let iter ((key->value key->value)
                   (template template))
          (if (null? key->value)
              template
              (iter (cdr key->value)
                    (match (car key->value)
                      ((key value)
                       (replace template key value)))))))))
    
    (test
     "a b c"
     (replace "a {x} c" "x" "b"))
    
    (test
     "a b {y} d"
     (replace "a {x} {y} d" "x" "b"))
    
    (test
     "a b c d"
     (replace "a {x} {y} d"
              '(("x" "b")
                ("y" "c"))))
    
  #+END_SRC
